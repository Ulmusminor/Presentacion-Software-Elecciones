---
title: "Entrega grupal"
author: "Marco del Olmo Linares (DNI: 50349431-Q), Marina Gonzàlez Murgadas (DNI: 00000000-X), ..."
format:
  html:
    self-contained: true
    theme: [style.scss]
    toc: true
    toc-location: right
    toc-title: Índice
editor: visual
---

## Instrucciones (leer antes de empezar)

-   Modificad dentro del documento `.qmd` vuestros datos personales (nombres y DNI) ubicados en la cabecera del archivo.

-   Aseguraos, **ANTES de seguir editando** el documento, que el archivo `.qmd` se renderiza correctamente y se genera el `.html` correspondiente en tu carpeta local de tu ordenador.

-   Los chunks (cajas de código) creados están o vacíos o incompletos. Una vez que editeis lo que consideres, debeis ir cambiando cada chunck a `#| eval: true` (o quitarlo directamente) para que se ejecuten.

-   Recordad que puedes ejecutar chunk a chunk con el botón *play* o ejecutar todos los chunk hasta uno dado (con el botón a la izquierda del anterior).

### Paquetes necesarios

> Introduce en el chunk inferior los paquetes que vayas a necesitar

```{r paquetes}
rm(list = ls()) # Borramos variables de environment
library(tidyverse)
library(lubridate)
library(sysfonts)
font_add(family = "GOT", regular = "Game of Thrones.ttf")
font_add_google(name = "Noto Serif", family = "Noto")
showtext::showtext_auto()
```

## Práctica grupal

### Datos

La práctica versará entorno a los **archivos de datos electorales** que ya hemos trabajado, recopilando datos de citas electorales al Congreso de los Diputados de España desde 2008 hasta la actualidad

```{r}
# NO TOQUES NADA
datos_elecciones <- read_csv(file = "./datos/datos_elecciones_brutos.csv")
cod_mun <- read_csv(file = "./datos/cod_mun.csv")
encuestas <- read_csv(file = "./datos/historical_surveys.csv")
siglas <- read_csv(file = "./datos/siglas.csv")
```

Los datos serán los siguientes:

-   `datos_elecciones`: archivo con los datos electorales al Congreso desde 2018 hasta las últimas de 2019.

    -   `tipo_eleccion`: tipo de elección (02 si es elección al congreso)
    -   `anno`, `mes`: año y mes de las elecciones
    -   `vuelta`: vuelta electoral (1 si es primera vuelta)
    -   `codigo_ccaa, codigo_provincia, codigo_municipio, codigo_distrito_electoral`: código de la ccaa, provincia, municipio y distrito electoral.
    -   `numero_mesas`: número de mesas electorales
    -   `censo`: censo electoral
    -   `participacion_1, participacion_2`: participación en el primer avance (14:00) y segundo avance (18:00) antes del cierre de urnas (20:00)
    -   `votos_blancos`: votos en blanco
    -   `votos_candidaturas`: votos a papeletas de partidos
    -   `votos_nulos`: votos nulos
    -   votos recibidos por cada uno de los partidos

-   `cod_mun`: archivo con los códigos y nombres de cada municipio

-   `siglas`: siglas y nombres asociados a cada partido

-   `encuestas`: tabla de encuestas electorales desde 1982. Algunas de las variables son las siguientes:

    -   `type_survey`: tipo de encuesta (nacional, autonómica, etc)
    -   `date_elec`: fecha de las futuras elecciones
    -   `id_pollster`, `pollster`, `media`: identificador y nombre de la casa encuestadora, así como el medio que lo haya encargado
    -   `field_date_from`, `field_date_to`: fecha de inicio y final del trabajo de campo
    -   `exit_poll`: si se trata de una encuesta a pie de urna o no
    -   `size`: tamaño muestral
    -   `turnout`: estimación de la participación
    -   estimación de intención de voto para los principales partidos

### Objetivos e ítems obligatorios

El objetivo de la entrega es realizar un análisis de los datos electorales, llevando a cabo la depuración, resúmenes y gráficos que consideres, tanto de sus resultados como del acierto de las encuestas electorales.

En concreto **se deberá trabajar solo en la ventana temporal que comprenden las elecciones desde 2008 hasta las últimas elecciones de 2019**.

#### Indicaciones generales

Amén de lo que te parezca oportuno ejecutar, serán obligatorios los siguientes ítems:

-   Cada grupo deberá presentar **al menos 48 horas antes un análisis de los datos** en formato `.qmd` y `.html` en modo **diapositivas**, que **serán las que expongan el día de la presentación**.

-   Durante la presentación se **explicará el análisis realizado** de manera que **cada miembro del equipo habla un tiempo similar** y **cada miembro podrá ser preguntado por cualquiera de los pasos**. La nota no tendrá porque ser la misma para todos/as los/as integrantes.

-   Se valorará no solo el contenido sino el continente (estética).

-   Se valorará positivamente que las diapositivas estén alojadas en Github.

-   El objetivo es demostrar que se adquirido el máximo de conocimientos del curso: cuantas más contenido del temario se incluya, mejor.

#### Ítems obligatorios:

-   ~~Se deberá de convertir los datos a tidydata cuando proceda.~~

En principio, la base de datos cod_mun es tidydata:

5 principios del tidydata:

1.  Cada **variable** en una **única columna.**

2.  Cada **individuo** en una **fila diferente.**

3.  Cada **celda** con un **único valor.**

4.  Cada **dataset** en un **tibble.**

5.  Si queremos cruzar **múltiples tablas** debemos tener una **columna común.**

La variable cod_mun está expresada en una columna y en municipio tenemos su correspondencia en nombres, cumpliendo el principio 1. Cada código municipal está en una fila diferente.

Sin embargo, la base de datos datos_elecciones no es tidy data. Correcciones a esta base:

\- La información de algunas variables se repite a lo largo de toda la base. Demostración de esto:

```{r}
dist_x_col <- datos_elecciones |> 
  summarise(across(everything(), n_distinct))

dist_x_col
```

En este sumario, los valores iguales a 1 indican que toda la variable es igual a 1.

Eliminamos estos datos con la siguiente operación:

```{r}
datos_elecciones_dist <- datos_elecciones |> 
  select(which(dist_x_col != 1))

datos_elecciones_dist
```

\- Las variables a partir de Berdeak-Los verdes son todas un recuento de votos por partido y por municipio. Esto viola el principio 1, porque una variable se representa en varias columnas.

```{r}
datos_elecciones_dist_votos <- datos_elecciones_dist |> 
  pivot_longer(cols = `BERDEAK-LOS VERDES`:ncol(datos_elecciones_dist), 
               values_to = "votos", names_to = "denominacion") |> 
  drop_na(votos)

datos_elecciones_dist_votos
```

\- Las variables `codigo_ccaa`, `codigo_provincia` y `codigo_municipio` no violan explícitamente el principio sobre toda la información en una celda, pero separadas no codifican bien la información. Se demuestra claramente usando distinct:

```{r}
datos_elecciones_dist_votos |> 
  distinct(codigo_municipio)
```

A menos que existan 473 municipios en España, en algunos de estos municipios la información se repite (y tenemos una base de datos, cod_mun, que tiene nombres para al menos 8135 provincias). Sabiendo que un código municipal no aporta información si no va ligado a su provincia y comunidad autónoma, mejor será que los unamos en la misma columna.

```{r}
datos_elecciones_tidy <- datos_elecciones_dist_votos |> 
  unite("cod_mun", c(codigo_ccaa, codigo_provincia, codigo_municipio), sep = "-") |> 
  unite("fecha", c(anno, mes), sep = "-") |> 
  mutate(fecha = ym(fecha))

datos_elecciones_tidy
```

Si ahora hacemos distinct(cod_mun) veremos que hay 8135 códigos municipales, lo que de hecho coincide con la base de datos de códigos municipales. La consecuencia directa de esto es que, si los códigos municipales están bien codificados, un inner_join y un left_join deberían tener los mismos efectos, porque toda la segunda base estaría dentro de la primera.

La base 'siglas' tampoco es tidydata. Si hacemos distinct(denominacion) sobre ella:

```{r}
siglas |> distinct(denominacion)
```

Veremos en esencia que hay algunos nombres de partidos que tienen varias siglas (es decir, que cada individuo no está en una sola fila, violando el segundo principio). Intentar utilizar esta tabla va a dar siempre lugar a error, porque no hay una asociación inyectiva entre un vector (denominacion) y el otro (siglas).

```{r}
siglas_tidy <- siglas |> 
  distinct(denominacion, .keep_all = TRUE)
```

Tomaremos el primer valor que aparezca en cualquier denominación, suponiendo que es lo bastante identificativo.

La base "encuestas" no es tidydata.

```{r}
encuestas_tidy <- encuestas |> 
  pivot_longer(cols = 'UCD':ncol(encuestas),
               names_to = "siglas", values_to = "porcentaje")

encuestas_tidy
```

-   ~~Se deberá **incluir al menos un cruce (join)** entre tablas.~~

Para garantizar que acotamos los datos de un mismo partido en todas las regiones, vamos a hacer dos joins:

```{r problematico}
datos_elecciones_tidy_ms <- datos_elecciones_tidy |> 
  inner_join(cod_mun, by = "cod_mun")

datos_elecciones_tidy_ms
```

-   ~~Reminder: información = varianza, así que se deberán retirar columnas que no nos van a aportar nada.~~

-   Se deberá usar el **paquete glue y lubridate** en algún momento, así como el paquete **forcats**, **ggplot2** y **plotly**

1.  glue

2.  ~~lubridate~~

3.  ~~forcats~~

4.  ~~ggplot2~~

5.  plotly

-   ~~Se deberá usar al menos una vez lo siguiente:~~

    -   ~~mutate~~
    -   ~~summarise~~
    -   ~~group_by (o equivalente)~~
    -   ~~case_when~~

-   ~~Tenemos muchísimos partidos que se presentan a las elecciones. Solo nos intereserán los siguientes partidos:~~

    -   ~~PARTIDO SOCIALISTA OBRERO ESPAÑOL (cuidado: tiene/tuvo federaciones - sucursales - con algún otro nombre)~~
    -   ~~PARTIDO POPULAR~~
    -   ~~CIUDADANOS (cuidado: tiene/tuvo federaciones - sucursales - con algún otro nombre)~~
    -   ~~PARTIDO NACIONALISTA VASCO~~
    -   ~~BLOQUE NACIONALISTA GALEGO~~
    -   ~~COMPROMÍS~~
    -   ~~CONVERGÈNCIA I UNIÓ~~
    -   ~~UNIDAS PODEMOS - IU (cuidado que aquí han tenido nombres variados - IU, los verdes, podem, ezker batua, ...- y no siempre han ido juntos, pero aquí los analizaremos juntos~~
    -   ~~ESQUERRA REPUBLICANA DE CATALUNYA~~
    -   ~~EH - BILDU (son ahora una coalición de partidos formados por Sortu, Eusko Alkartasuna, Aralar, Alternatiba)~~
    -   ~~MÁS PAÍS~~
    -   ~~VOX~~

```{r masproblematico}
elecciones_interes <- datos_elecciones_tidy_ms |> 
  mutate(denominacion2 = case_when(str_detect(string = str_to_upper(denominacion), pattern = "PARTIDO POPULAR|PP") 
                            ~ "Partido Popular",
                            str_detect(string = str_to_upper(denominacion), pattern = "PARTIDO SOCIALISTA OBRERO|PARTIT DELS SOCIALISTES|PARTIDO SOCIALISTA DE EUSKADI|PARTIDO DOS SOCIALISTAS DE GALICIA|PARTIT SOCIALISTA|PSOE") 
                            ~ "Partido Socialista",
                            str_detect(string = str_to_upper(denominacion), pattern = "CIUDADANOS|CIUTADANS") 
                            ~ "Ciudadanos",
                            str_detect(string = str_to_upper(denominacion), pattern = "VOX") 
                            ~ "VOX",
                            str_detect(string = str_to_upper(denominacion), pattern = "NACIONALISTA VASCO") 
                            ~ "Partido Nacionalista Vasco",
                            str_detect(string = str_to_upper(denominacion), pattern = "NACIONALISTA GALEGO")
                            ~ "Bloque Nacionalista Galego",
                            str_detect(string = str_to_upper(denominacion), pattern = "COMPROMÍS")
                            ~ "Compromís",
                            str_detect(string = str_to_upper(denominacion), pattern = "CONVERGENCIA") &
                              str_detect(string = str_to_upper(denominacion), pattern = "UNIO")
                            ~ "Convergencia i unió",
                            str_detect(string = str_to_upper(denominacion), pattern = "PODEM| UNIDA")
                            ~ "Unidas Podemos - IU",
                            str_detect(string = str_to_upper(denominacion), pattern = "ESQUERRA REPUBLICANA DE CATALUNYA")
                            ~ "Esquerra Republicana de Catalunya",
                            str_detect(string = str_to_upper(denominacion), pattern = "BILDU|ALKARTASUNA|ARALAR")
                            ~ "Euskal Herria - BILDU",
                            str_detect(string = str_to_upper(denominacion), pattern = "MÁS PAÍS")
                            ~ "Más país",
                            TRUE ~ "OTROS"
                            )) |> 
  mutate(votos_r = sum(votos),
         porc_votos = 100*votos_r/(votos_blancos+votos_candidaturas), 
         .by = c(fecha, cod_mun, denominacion))

elecciones_interes
```

-   ~~Todo lo que no sea alguno de los anteriores partidos deberá ser imputado como "OTROS". Recuerda agregar los datos tras la recodificación anterior.~~

-   Para las visualizaciones se usarán las siglas de los partidos. El trabajo deberá contener al menos 5 gráficas, de las cuales al menos 3 deben ser tipos de gráficos distintos (ver <https://r-graph-gallery.com/>), todas ellas con un tema personalizado

-   Deberás usar los 4 archivos de datos en algún momento

-   Deberás definir al menos una función propia (que no sea trivial)

```{r}
n_votado <- function(sig, vot, n) {
  
  return(sig[order(-vot)[n]])
}
```


Podemos definir funciones para determinar el segundo ganador y para los municipios.

-   ~~Deberás descartar obligatoriamente las encuestas que:~~

    -   hagan referencia a elecciones anteriores a 2008
    -   que sean a pie de urna
    -   que tenga un tamaño muestral inferior a 750 o que sea desconocido
    -   que tengan menos de 1 o menos días de trabajo de campo

```{r}
elecciones_nacnac <- elecciones_interes |> 
  mutate(territorio = factor(case_when(
    denominacion2 %in% c("Partido Popular", "Partido Socialista", "Ciudadanos", "VOX", "Unidas Podemos - IU", "Más país")
    ~ "Partido nacional", 
    denominacion2 == "OTROS" 
    ~ "OTROS",
    TRUE
    ~ "Partido regionalista")),
    territorio = fct_relevel(territorio, "Partido nacional", "Partido regionalista"),
    denominacion2 = factor(denominacion2, levels = c("Partido Socialista", "Partido Popular", "Unidas Podemos - IU", "VOX", "Esquerra Republicana de Catalunya", "Partido Nacionalista Vasco", "Ciudadanos", "Bloque Nacionalista Galego", "Compromís", "Convergencia i unió", "Euskal Herria - BILDU", "OTROS"), ordered = T))

encuestas_tidy_uso <- encuestas_tidy |> 
  drop_na(size) |> 
  filter(date_elec > date("2008-01-01"),
         exit_poll == FALSE,
         size >= 750,
         field_date_to - field_date_from != 0
         ) |>
  mutate(siglas = ifelse(siglas == "CS", "C's", siglas)) |> 
  inner_join(siglas_tidy, by = "siglas")

encuestas_tidy_uso
```

-   Deberás responder obligatoriamente a las siguientes preguntas (más las que consideres analizar para distinguirte del resto de equipos, ya sea numérica y/o gráficamente, pudiendo responder con números y/o con gráficos, decidiendo la mejor visualización que consideres.)

    -   ¿Cómo se reparte el voto de partidos de ámbito nacional (PSOE, PP, VOX, CS, MP, UP - IU) frente a los partidos de corte autonómico o nacionalista?
    
Para esta cuestión, añadimos una variable que distingue entre partidos de corte nacional y nacionalista.

Partidos nacionales:
"Partido Popular", "Partido Socialista", "Ciudadanos", "VOX", "Unidas Podemos - IU", "Más país"

Partidos nacionalistas:
Todos los que quedan menos "Otros".

OTROS:
Los que quedan.

Aquí hacemos gala de mi idea de tema: Juego de tronos.

```{r}
juegodetemas <- function()
  theme_minimal() +
  theme(
 plot.background = element_rect(fill = "#222229"),
 panel.background = element_rect(fill = "#303030"),
 text = element_text(color = "#9E772C", family = "Noto"),
 axis.title = element_text(family = "Noto"),
 title = element_text(color = "#BE974C", family = "GOT"),
 panel.grid.major.x = element_blank(),
 panel.grid.major.y = element_line(color = "#969696"),
 panel.grid.minor = element_blank(),
 axis.text = element_text(color = "#D2D3CE"),
 strip.text.x = element_text(color = "#D2D3CE")
 )
```

```{r}
elecciones_nacnac |> 
  summarise(porc_votos = sum(porc_votos)/8135, .by = c('fecha', 'territorio')) |> 
  ggplot() +
  geom_point(aes(y = porc_votos, x = fecha, color = territorio)) +
  geom_line(aes(y = porc_votos, x = fecha, color = territorio)) +
  scale_x_date(breaks = elecciones_nacnac |> pull(fecha) |> unique()) +
  labs(
    title = "Distribución del voto nacional",
    subtitle = "Porcentaje de votos dirigidos a nacionales o regionalistas",
    y = "%",
    x = "Año"
  ) +
  juegodetemas() +
  theme(
    panel.grid.major.x = element_line(color = "#969696", linetype = "dashed")
  )
```

```         
-   ¿Cuál el partido ganador en los municipios de más de 100 000 habitantes de censo en cada una de las elecciones?
```

```{r}
elecciones_nacnac |> 
  filter(censo > 1e5) |> 
  summarize(ganador = n_votado(sig = denominacion2, vot = votos, n = 1), .by = c(municipio, fecha)) |> 
  mutate(ganador = factor(ganador, levels = c("Partido Socialista", "Partido Popular", "Unidas Podemos - IU", "VOX", "Esquerra Republicana de Catalunya", "Partido Nacionalista Vasco", "Ciudadanos", "Bloque Nacionalista Galego", "Compromís", "Convergencia i unió", "Euskal Herria - BILDU", "OTROS"))) |> 
  ggplot() +
  facet_wrap(~ fecha) +
  geom_bar(aes(x = ganador, fill = ganador)) +
  scale_fill_manual(values = c("#8A2835", "#002E4A", "#966BB3", "#6C9A42", "#B85126", "#1B3C05", "#636363")) +
  scale_x_discrete(breaks = c("Partido Socialista", "Partido Popular", "Unidas Podemos - IU", "VOX", "Esquerra Republicana de Catalunya", "Partido Nacionalista Vasco", "OTROS"), labels = c("PSOE", "PP", "UP-IU", "VOX", "ERC", "PNV", "Otros")) +
  juegodetemas()
```

```         
-   ¿Qué partido fue el segundo cuando el primero fue el PSOE? ¿Y cuándo el primero fue el PP?
```

```{r}
elecciones_nacnac |> 
  summarize(ganador = n_votado(sig = denominacion2, vot = votos, n = 1),
            segundo = n_votado(sig = denominacion2, vot = votos, n = 2), .by = c(municipio, fecha)) |> 
  summarize(n = n(), .by = c(ganador, segundo)) |> 
  drop_na(segundo) |> 
  mutate(segundo = factor(segundo, levels = c("Partido Socialista", "Partido Popular", "Unidas Podemos - IU", "VOX", "Esquerra Republicana de Catalunya", "Partido Nacionalista Vasco", "Ciudadanos", "Bloque Nacionalista Galego", "Compromís", "Convergencia i unió", "Euskal Herria - BILDU", "OTROS"))) |> 
  filter(ganador == "Partido Socialista" | ganador == "Partido Popular") |> 
  ggplot() +
  facet_grid(~ ganador) +
  geom_col(aes(x = segundo, y = n, fill = segundo)) +
  scale_x_discrete(breaks = c("Bloque Nacionalista Galego", "Ciudadanos", "Compromís", "Convergencia i unió", "Esquerra Republicana de Catalunya", "Euskal Herria - BILDU", "Partido Socialista", "Partido Popular", "Unidas Podemos - IU", "VOX", "Partido Nacionalista Vasco", "OTROS"), labels = c("BNG", "Cs", "CCPV", "CiU", "ERC", "EH-BILDU", "PSOE", "PP", "UP-IU", "VOX", "PNV", "Otros")) +
  scale_fill_manual(values = c("#8A2835", "#002E4A", "#966BB3", "#6C9A42", "#B85126", "#1B3C05", "#D0622B", "#0FD7CC", "#AD3C04", "#282244", "#608E36", "#636363")) +
  juegodetemas() +
  theme(
    axis.text.x = element_text(angle = 60, vjust = 0.5) 
  )
```

```         
-   ¿En qué municipios de más 2000 habitantes de censo, provincias o autonomías la diferencia entre el ganador y el segundo es más elevada?
```

```{r}
elecciones_nacnac |> 
  filter(censo > 2000) |> 
  slice_max(porc_votos, n = 2, with_ties = F, by = c(fecha, cod_mun)) |> 
  mutate(diferencia = diff(-porc_votos), .by = c(fecha, cod_mun)) |> 
  slice_max(diferencia, n = 10, by = fecha)
```

```         
-   ¿Cuáles son los municipios con mayor porcentaje de votos nulos de España?
```

```{r}
elecciones_nacnac |> 
  mutate(porc_nulos = votos_nulos*100/votos_candidaturas, .by = c(cod_mun, fecha)) |> 
  distinct(municipio, .keep_all = T, .by = fecha) |> 
  slice_max(n = 10, order_by = data_frame(porc_nulos, censo), by = c(fecha)) |> 
  select(c(fecha, cod_mun, municipio, censo, votos_nulos, porc_nulos))
```

```         
-   ¿En qué sitios hay mayor participación? ¿Quién ganó en los sitios con mayor participación y donde menos? ¿A quién le beneficia la baja participación?
```

```{r}
elecciones_part <- elecciones_nacnac |> 
  filter(censo > 2e3) |> 
  mutate(participacion_t = votos_candidaturas*100/censo, .by = c(cod_mun, fecha))
  
elecciones_part
```

```{r}
elecciones_part |> 
  mutate(fechaf = factor(fecha)) |> 
  ggplot() +
  geom_boxplot(aes(y = participacion_t, x = fechaf, group = fecha), 
               color = "#D2D3CE", fill = "#636363") +
  juegodetemas()
```


```{r}
elecciones_partmax <- elecciones_part |> 
  slice_max(n = 1, order_by = votos_r, by = c(cod_mun, fecha)) |> 
  slice_max(n = 10, order_by = participacion_t, by = c(fecha))

elecciones_partmax |> count(denominacion2) |> 
  arrange(-n)
```

```{r}
elecciones_partmin <- elecciones_part |> 
  slice_max(n = 1, order_by = votos_r, by = c(cod_mun, fecha)) |> 
  slice_min(n = 10, order_by = participacion_t, by = c(fecha))

elecciones_partmin |> count(denominacion2) |> 
  arrange(-n)
```

```         
-   ¿Cómo analizar la relación entre censo y voto? ¿Es cierto que ciertos partidos ganan lo rural?
```

```{r}
p <- elecciones_nacnac |> 
  filter(denominacion2 != "OTROS") |> 
  ggplot() +
  facet_wrap(~ denominacion2) +
  geom_point(aes(y = votos_r*100/censo, x = censo), color = "#FC8D0B", alpha = 0.01) +
  stat_smooth(aes(y = votos_r*100/censo, x = censo), color = "#FC8D0B", formula = y ~ x, method = "gam") +
  scale_x_log10() +
  juegodetemas()

p
```

```         
-   ¿Cómo calibrar el error de las encuestas? ¿Cómo visualizarlo? (recuerda que las encuestas son intención de voto a nivel nacional)
```

```{r}
encuestas_final <- encuestas_tidy_uso |> 
  mutate(denominacion2 = case_when(str_detect(string = str_to_upper(denominacion), pattern = "PARTIDO POPULAR|PP") 
                            ~ "Partido Popular",
                            str_detect(string = str_to_upper(denominacion), pattern = "PARTIDO SOCIALISTA OBRERO|PARTIT DELS SOCIALISTES|PARTIDO SOCIALISTA DE EUSKADI|PARTIDO DOS SOCIALISTAS DE GALICIA|PARTIT SOCIALISTA|PSOE") 
                            ~ "Partido Socialista",
                            str_detect(string = str_to_upper(denominacion), pattern = "CIUDADANOS|CIUTADANS") 
                            ~ "Ciudadanos",
                            str_detect(string = str_to_upper(denominacion), pattern = "VOX") 
                            ~ "VOX",
                            str_detect(string = str_to_upper(denominacion), pattern = "NACIONALISTA VASCO") 
                            ~ "Partido Nacionalista Vasco",
                            str_detect(string = str_to_upper(denominacion), pattern = "NACIONALISTA GALEGO")
                            ~ "Bloque Nacionalista Galego",
                            str_detect(string = str_to_upper(denominacion), pattern = "COMPROMÍS")
                            ~ "Compromís",
                            str_detect(string = str_to_upper(denominacion), pattern = "CONVERGENCIA") &
                              str_detect(string = str_to_upper(denominacion), pattern = "UNIO")
                            ~ "Convergencia i unió",
                            str_detect(string = str_to_upper(denominacion), pattern = "PODEM| UNIDA")
                            ~ "Unidas Podemos - IU",
                            str_detect(string = str_to_upper(denominacion), pattern = "ESQUERRA REPUBLICANA DE CATALUNYA")
                            ~ "Esquerra Republicana de Catalunya",
                            str_detect(string = str_to_upper(denominacion), pattern = "BILDU|ALKARTASUNA|ARALAR")
                            ~ "Euskal Herria - BILDU",
                            str_detect(string = str_to_upper(denominacion), pattern = "MÁS PAÍS")
                            ~ "Más país",
                            TRUE ~ "OTROS"
                            ), .by = c(date_elec, id_pollster, denominacion),
         denominacion2 = factor(denominacion2, levels = c("Partido Socialista", "Partido Popular", "Unidas Podemos - IU", "VOX", "Esquerra Republicana de Catalunya", "Partido Nacionalista Vasco", "Ciudadanos", "Bloque Nacionalista Galego", "Compromís", "Convergencia i unió", "Euskal Herria - BILDU", "OTROS"), ordered = T))

encuestas_final |> filter(denominacion2 == "Ciudadanos", date_elec > "2016-01-01")
```

Podemos visualizar las encuestas de una forma (así se hace algunas veces)

```{r}
q <- encuestas_final |> 
  drop_na(porcentaje, field_date_to, denominacion2) |> 
  ggplot() +
  geom_point(aes(y = porcentaje, x = field_date_to, color = denominacion2)) +
  geom_smooth(aes(y = porcentaje, x = field_date_to, color = denominacion2), formula = y ~ x, method = "loess") +
  scale_color_manual(values = c("#8A2835", "#002E4A", "#966BB3", "#6C9A42", "#B85126", "#1B3C05", "#D0622B", "#0FD7CC", "#AD3C04", "#282244", "#608E36", "#636363")) +
  juegodetemas()

q
##plotly::ggplotly(q)
```

```{r}
encuestas_final |> 
  drop_na(porcentaje, field_date_to, denominacion2) |> 
  filter(field_date_to < "2012-01-01") |> 
  ggplot() +
  geom_point(aes(y = porcentaje, x = field_date_to, color = denominacion2)) +
  geom_smooth(aes(y = porcentaje, x = field_date_to, color = denominacion2), formula = y ~ x, method = "loess") +
  scale_color_manual(values = c("#8A2835", "#002E4A", "#966BB3", "#B85126", "#1B3C05", "#0FD7CC", "#282244", "#636363")) +
  scale_x_date(date_breaks = "1 year", date_labels = "%Y") +
  juegodetemas()
```

```{r}
porc_reales <- elecciones_nacnac |> 
  summarise(porc_votos = sum(porc_votos)/8135, .by = c('fecha', 'denominacion2'))

porc_reales |> 
  summarize(porc_votos = mean(porc_votos), .by = c(fecha, denominacion2)) |>
  drop_na(porc_votos, fecha, denominacion2) |> 
  ggplot() +
  geom_point(aes(y = porc_votos, x = fecha, color = denominacion2), size = 2) +
  geom_line(aes(y = porc_votos, x = fecha, color = denominacion2)) +
  geom_smooth(data = encuestas_final |> drop_na(porcentaje, field_date_to, denominacion2) |> filter(field_date_to < "2012-01-01"), 
              aes(y = porcentaje, x = field_date_to, color = denominacion2), formula = y ~ x, method = "loess") +
  scale_color_manual(values = c("#8A2835", "#002E4A", "#966BB3", "#6C9A42", "#B85126", "#1B3C05", "#D0622B", "#0FD7CC", "#AD3C04", "#282244", "#608E36", "#636363")) +
  scale_x_date(breaks = elecciones_nacnac |> pull(fecha) |> unique()) +
  juegodetemas() +
  theme(
    panel.grid.major.x = element_line(color = "#969696", linetype = "dashed")
  )
```

```         
-   ¿En qué elección se equivocaron más las encuestas?
```

```{r}
porc_encuestas <- encuestas_final |> 
  summarize(porc_votose = mean(porcentaje, na.rm = T), .by = c(denominacion2, date_elec)) |> 
  drop_na() |> 
  separate(date_elec, into = c("Anno", "mes","dia"), sep = "-") |> 
  select(-dia) |> 
  unite(col = "fecha", Anno:mes, sep = "-", ) |> 
  mutate(fecha = as_date(fecha, format = "%Y%m"))

porc_encuestas

porc_reales
```

```{r}
totaltotal <- porc_encuestas |> 
  full_join(porc_reales, by = c("fecha", "denominacion2"))

totaltotal
```

```{r}
totaltotal |> 
  mutate(difporc = abs(porc_votose-porc_votos)) |> 
  drop_na(difporc) |> 
  summarize(suma = sum(difporc), .by = fecha)
```

```         
-   ¿Cómo se equivocaron las encuestas en partidos de ámbito nacional (PSOE, PP, VOX, CS, MP, UP - IU)
```

```{r}
totaltotal |> 
  mutate(difporc = porc_votose-porc_votos) |> 
  drop_na(difporc) |> 
  summarize(suma = sum(difporc), .by = c(denominacion2, fecha)) |> 
  slice_min(order_by = suma, by = c(fecha), n = 3)
```

```{r}
totaltotal |> 
  mutate(difporc = porc_votose-porc_votos) |> 
  drop_na(difporc) |> 
  summarize(suma = sum(difporc), .by = c(denominacion2, fecha)) |> 
  slice_max(order_by = suma, by = c(fecha), n = 3)
```

```{r}
totaltotal |> 
  mutate(difporc = porc_votose-porc_votos) |> 
  drop_na(difporc) |> 
  summarize(suma = sum(difporc), .by = c(denominacion2, fecha)) |> 
  ggplot() +
  geom_line(aes(y = suma, x = fecha, color = denominacion2), linewidth = 1) +
  scale_color_manual(values = c("#8A2835", "#002E4A", "#966BB3", "#6C9A42", "#B85126", "#1B3C05", "#D0622B", "#0FD7CC", "#AD3C04", "#636363")) +
  scale_x_date(breaks = elecciones_nacnac |> pull(fecha) |> unique()) +
  juegodetemas() +
  theme(
    panel.grid.major.x = element_line(color = "#969696", linetype = "dashed")
  )
```

```         
-   ¿Qué casas encuestadores acertaron más y cuales se desviaron más de los resultados?
```

```{r}
porc_encuestas_casas <- encuestas_final |> 
  summarize(porc_votose = mean(porcentaje, na.rm = T), .by = c(pollster, denominacion2, date_elec)) |> 
  drop_na() |> 
  separate(date_elec, into = c("Anno", "mes","dia"), sep = "-") |> 
  select(-dia) |> 
  unite(col = "fecha", Anno:mes, sep = "-", ) |> 
  mutate(fecha = as_date(fecha, format = "%Y%m"))
```

```{r}
finalfinalfinal <- porc_encuestas_casas |> full_join(totaltotal |> select(-porc_votose), by = c("denominacion2", "fecha"))
finalfinalfinal
```


```{r}
finalfinalfinal |> 
  mutate(difporc = abs(porc_votose-porc_votos)) |> 
  drop_na(difporc) |> 
  summarize(suma = sum(difporc), .by = c(pollster, fecha)) |> 
  slice_max(suma, n = 3, by = c(fecha))
```

#### Calificación

**No se valorará más al que más cosas haga**. Más no siempre es mejor. Se valorará la **originalidad** (respecto al resto de trabajos, por ejemplo en lo analizado o en el tema o ...) de lo planteado, tanto en manejo de tablas como en visualización, el **cariño** puesto en la entrega (el cariño en la vida es importante) y la **pertinencia** de lo realizado. Una vez que tengáis los ítems obligatorios con tu base de datos más o menos completada, **piensa antes** de ponerte a picar código: ¿qué puede ser interesante? ¿Qué necesito para poder obtener un resumen tanto numérico tanto visual?

Recordad que el fin real es demostrarme un dominio de las herramientas vistas a lo largo del curso. Y eso pasa no solo por la cantidad de ellas utilizadas sino por la calidad al ejecutarlas.
